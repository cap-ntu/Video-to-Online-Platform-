import {DSH_RECEIVE_STATISTICS, DSH_REQUEST_STATISTICS} from "../../constants/actionTypes";

// TODO: static data
let data = [];
let counter = 0;

const requestStatistics = () => ({
    type: DSH_REQUEST_STATISTICS,
});

const requestStatistics_Success = dataArray => ({
    type: DSH_RECEIVE_STATISTICS,
    status: 'SUCCESS',
    dataArray: dataArray,
    receivedAt: Date.now()
});

const requestStatistics_Failure = error => ({
    type: DSH_RECEIVE_STATISTICS,
    status: 'FAILURE',
    error: error
});

export const DSH_getStatistics = () => {
    return dispatch => {
        dispatch(requestStatistics());
        /** This is for result detection server */
            // return fetch(`http://localhost:3000/path/to/result`)
            //     .then(response => {
            //         if (response.ok)
            //             return {json: response.json(), status: 200};
            //         else
            //             throw new Error('something goes wrong');
            //     })
            //     .then(json => {
            //         if (json.length === 0)
            //             return dispatch(receiveResult_Failure('Fetch failure'));
            //         newData = json;
            //     })
            //     .catch(error => dispatch(receiveResult_Failure(error)));

        const newData = autoGenerateData();
        if (data.length === 0) {  // build machine hardware info
            for (let key in newData.resource) {
                if (newData.resource.hasOwnProperty(key))
                    data.push({id: key.toString(), data: []})
            }
        }

        // map to data
        let time = newData.time;
        data.forEach(item => {
            if (newData.resource.hasOwnProperty(item.id.toString())) {
                item.data.push({
                    x: time,
                    y: newData.resource[item.id.toString()]
                });
                item.data.splice(0, item.data.length - 60);
            }
        });
        return dispatch(requestStatistics_Success(data.slice()))
    }
};

function autoGenerateData() {
    const data = {
        time: counter,
        resource: {CPU1: Math.random(), CPU2: Math.random(), CPU3: Math.random(), CPU4: Math.random(),
            CPU5: Math.random(), CPU6: Math.random(), CPU7: Math.random(), CPU8: Math.random(),
        Memory1: Math.random() * 16,
        Disk: Math.random() * 500,
        Network: Math.random() * 1000,
        GPU: Math.random(),
    }};
    counter += 0.5;
    return data;
}
